" Set python2 and python3 paths for nvim
if !has('nvim')
  let g:python_host_prog = '/usr/local/var/pyenv/versions/2.7.13/envs/neovim-2.7.13/bin/python'
  let g:python3_host_prog =  '/usr/local/var/pyenv/versions/3.6.0/envs/neovim-3.6.0/bin/python'
endif

set nocompatible
filetype off

call plug#begin('~/.vim/plugged')

" My Plugins
Plug 'airblade/vim-gitgutter',
Plug 'bfredl/nvim-miniyank',
Plug 'bkad/CamelCaseMotion',
Plug 'bling/vim-airline',
Plug 'vim-airline/vim-airline-themes',
" Assumes livedown is already installed using node.
Plug 'shime/vim-livedown',
" Assumes fzf is already installed using brew. 
Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim',
Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer' },

Plug 'eugen0329/vim-esearch',
Plug 'flazz/vim-colorschemes',
if !has('nvim')
  Plug 'tpope/vim-sensible',
endif
Plug 'tpope/vim-surround',
Plug 'tpope/vim-fugitive',
Plug 'tpope/vim-rails',
Plug 'tpope/vim-rake',
Plug 'nanotech/jellybeans.vim',
Plug 'powerline/powerline',
Plug 'scrooloose/syntastic',
Plug 'scrooloose/nerdtree',
Plug 'rking/ag.vim',
Plug 'kana/vim-textobj-user',
Plug 'nelstrom/vim-textobj-rubyblock',
Plug 'slim-template/vim-slim',
Plug 'SirVer/ultisnips',
Plug 'honza/vim-snippets',
Plug 'Yggdroot/indentLine',
Plug 'ervandew/supertab',
Plug 'Raimondi/delimitMate',
Plug 'airblade/vim-rooter',
Plug 'vim-scripts/vim-auto-save'

call plug#end()

" wildmenu setup
set wildmenu
set wildmode=list:longest,full,full
set wildignore=*.class,*.git

" SirVer/ultisnips setup.
let g:UltiSnipsSnippetDirectories=['UltiSnips']
let g:UltiSnipsExpandTrigger='<c-j>'
let g:UltiSnipsJumpForwardTrigger='<c-k>'
let g:UltiSnipsJumpBackwardTrigger='<s-c-k>'

" Valloric/YouCompleteMe setup
let g:ycm_filetype_blacklist = {}

" vim-scripts/vim-auto-save setup (do not change the 'updatetime' option)
let g:auto_save_no_updatetime = 1

" refresh gitgutter every 250ms rather than 2s
set updatetime=250

" miniyank settings
map p <Plug>(miniyank-autoput)
map P <Plug>(miniyank-autoPut)
map <leader>n <Plug>(miniyank-cycle)

" make w, b, and e use CamelCaseMotion
map <silent>w <Plug>CamelCaseMotion_w
map <silent>b <Plug>CamelCaseMotion_b
map <silent>e <Plug>CamelCaseMotion_e
sunmap w
sunmap b
sunmap e

" Show airline without split buffers
set laststatus=2

filetype plugin indent on

let mapleader=","

color jellybeans

set cursorline
set expandtab
set modelines=0
set shiftwidth=2
set clipboard=unnamed
set synmaxcol=128
if !has('nvim')
  set ttyscroll=10
endif
set encoding=utf-8
set tabstop=2
set nowrap
set number
set expandtab
set nowritebackup
set noswapfile
set nobackup
set hlsearch
set ignorecase
set smartcase
set mouse=a

" Automatic formatting
autocmd BufWritePre *.rb :%s/\s\+$//e
autocmd BufWritePre *.go :%s/\s\+$//e
autocmd BufWritePre *.haml :%s/\s\+$//e
autocmd BufWritePre *.html :%s/\s\+$//e
autocmd BufWritePre *.scss :%s/\s\+$//e
autocmd BufWritePre *.slim :%s/\s\+$//e

au BufNewFile * set noeol
au BufRead,BufNewFile *.go set filetype=go

" No show command
autocmd VimEnter * set nosc

" Quick ESC
imap jj <ESC>

" Jump to the next row on long lines
map <Down> gj
map <Up>   gk
nnoremap j gj
nnoremap k gk

" format the entire file
nmap <leader>fef ggVG=

" Open new buffers
nmap <leader>s<left>   :leftabove  vnew<cr>
nmap <leader>s<right>  :rightbelow vnew<cr>
nmap <leader>s<up>     :leftabove  new<cr>
nmap <leader>s<down>   :rightbelow new<cr>

" Tab between buffers
noremap <tab> <c-w><c-w>

" Switch between last two buffers
nnoremap <leader><leader> <C-^>

" Resize buffers
if bufwinnr(1)
  nmap Ä <C-W><<C-W><
  nmap Ö <C-W>><C-W>>
  nmap ö <C-W>-<C-W>-
  nmap ä <C-W>+<C-W>+
endif

" NERDTree
nmap <leader>n :NERDTreeToggle<CR>
let NERDTreeHighlightCursorline=1
let NERDTreeIgnore = ['tmp', '.yardoc', 'pkg']

" Syntastic
let g:syntastic_mode_map = { 'mode': 'passive' }
let g:syntastic_ruby_exec = '~/.rvm/rubies/ruby-2.0.0-p0/bin/ruby'

" Go programming
set rtp+=/usr/local/Cellar/go/1.0.3/misc/vim

" Quit with :Q
command -nargs=0 Quit :qa!

" Custom (kmjohny)
com! FormatJSON %!python -m json.tool

"" fzf settings/bindings
let $FZF_DEFAULT_COMMAND = 'ag -l -g ""'
let g:fzf_history_dir = '~/.fzf-history'

" Fuzzy-find with fzf
map <C-p> :Files<cr>
nmap <C-p> :Files<cr>

" View commits in fzf
nmap <Leader>c :Commits<cr>

" Complete from open tmux panes (from @junegunn)
inoremap <expr> <C-x><C-t> fzf#complete( 'tmuxwords.rb -all-but-current --scroll 499 --min 5')
inoremap <expr> <C-x><C-k> fzf#complete ('cat /usr/share/dict/words')

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Advanced customization using autoload functions
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

" eclim setup auto-completion using Valloric/YouCompleteMe
let g:EclimCompletionMethod = 'omnifunc'
" vim command setup to start eclimd
command StartupEclim :silent !eclimd -b
