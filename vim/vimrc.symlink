" Set python2 and python3 paths for nvim
if has('nvim')
  let g:python_host_prog = '/usr/local/var/pyenv/versions/miniconda3-latest/envs/general-py2/bin/python'
  let g:python3_host_prog =  '/usr/local/var/pyenv/versions/miniconda3-latest/envs/general/bin/python'
  " let g:python3_host_prog =  '/usr/local/var/pyenv/versions/miniconda3-latest/envs/general/bin/python'
endif

set nocompatible
filetype off

call plug#begin('~/.vim/plugged')

" My Plugins
Plug 'airblade/vim-gitgutter',
Plug 'bfredl/nvim-miniyank',
Plug 'bkad/CamelCaseMotion',
Plug 'bling/vim-airline',
Plug 'vim-airline/vim-airline-themes',
" Assumes livedown is already installed using node.
Plug 'shime/vim-livedown',
" Assumes fzf is already installed using brew. 
Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim',
" Does not work with coc-vim
" Plug 'Valloric/YouCompleteMe', { 'do': './install.py --clang-completer' },
Plug 'eugen0329/vim-esearch',
Plug 'flazz/vim-colorschemes',
if !has('nvim')
  Plug 'tpope/vim-sensible',
endif
Plug 'tpope/vim-surround',
Plug 'tpope/vim-fugitive',
Plug 'tpope/vim-rails',
Plug 'tpope/vim-rake',
Plug 'tpope/vim-commentary',
Plug 'tpope/vim-repeat',
Plug 'nanotech/jellybeans.vim',
Plug 'powerline/powerline',
Plug 'python-mode/python-mode',
" Plug 'scrooloose/syntastic',
Plug 'scrooloose/nerdtree',
Plug 'rking/ag.vim',
Plug 'kana/vim-textobj-user',
Plug 'nelstrom/vim-textobj-rubyblock',
Plug 'slim-template/vim-slim',
Plug 'SirVer/ultisnips',
Plug 'honza/vim-snippets',
Plug 'Yggdroot/indentLine',
" Plug 'ervandew/supertab',
Plug 'Raimondi/delimitMate',
Plug 'airblade/vim-rooter',
Plug 'vim-scripts/vim-auto-save',
Plug 'w0rp/ale',
" xolox/vim-misc is required by xolox/vim-notes
Plug 'xolox/vim-misc',
Plug 'xolox/vim-notes'
Plug 'wmvanvliet/jupyter-vim'
Plug 'lambdalisue/vim-pyenv'
Plug 'rhysd/devdocs.vim'
" Plug 'jupyter-vim/jupyter-vim'
Plug 'lambdalisue/vim-pyenv'
Plug 'rhysd/devdocs.vim'
Plug 'cjrh/vim-conda'
" Plug 'lervag/vimtex'
Plug 'janko/vim-test'
Plug 'diepm/vim-rest-console'

Plug 'xuhdev/vim-latex-live-preview', { 'for': 'tex' }

Plug 'neoclide/coc.nvim', {'branch': 'release'}
" Plug 'davidhalter/jedi-vim'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
Plug 'christoomey/vim-sort-motion'
" Needed for vim-sort-motion
Plug 'kana/vim-textobj-indent'
Plug 'christoomey/vim-titlecase'
Plug 'inkarkat/vim-ReplaceWithRegister'
Plug 'heavenshell/vim-pydocstring', { 'do': 'make install' }


" Plug 'spacevim/spacevim'

call plug#end()




" wildmenu setup
set wildmenu
set wildmode=list:longest,full,full
set wildignore=*.class,*.git

" diepm/vim-rest-console settings
let g:vrc_auto_format_response_patterns = {
\ 'json': 'jq "."',
\ 'xml': 'xmllint --format -',
\}

let g:vrc_response_default_content_type = 'application/json'

" janko/vim-test these settings
let test#strategy = "neovim"
let test#java#runner = 'gradletest'
nmap <C-n> :TestNearest<CR>
nmap <C-f> :TestFile<CR>
nmap <C-s> :TestSuite<CR>
nmap <C-l> :TestLast<CR>
nmap <C-g> :TestVisit<CR>


" After this is configured, :ALEFix will try and fix your JS code with ESLint.
let g:ale_fixers = {
\   'python': ['autopep8',
\              'isort', 
\              'yapf',
\              'black',
\              'add_blank_lines_for_python_control_statements',
\              'remove_trailing_lines',
\              'trim_whitespace'],
\   'java': [],
\}

" ALE linters
let g:ale_linters = {
\   'python': ['flake8',  
\              'mypy',
\              'prospector',
\              'pycodestyle', 
\              'pyflakes',
\              'pylint',
\              'pyls',
\              'pyre',
\              'vulture'],
\   'java': [],
\}



" xuhdev/vim-latex-live-preview setup
autocmd Filetype tex setl updatetime=1
let g:livepreview_previewer = 'open -a Preview'

" lervag/vimtex setup
" let g:tex_flavor='latex'
" let g:vimtex_view_method='zathura'
" let g:vimtex_quickfix_mode=0
" set conceallevel=1
" let g:tex_conceal='abdmg'

" xolox/vim-notes setup
let g:notes_directories = ['~/Documents/notes/work', '~/Documents/notes/personal']
let g:notes_suffix = '.tex'
let g:notes_unicode_enabled = 0

" SirVer/ultisnips setup.
let g:UltiSnipsSnippetDirectories=[$HOME.'/.ultisnips/snippets', 'UltiSnips']
let g:UltiSnipsExpandTrigger='<c-j>'
let g:UltiSnipsJumpForwardTrigger='<tab>'
let g:UltiSnipsJumpBackwardTrigger='<s-tab>'
let g:UltiSnipsListSnippets='<c-h>'
let g:UltiSnipsUsePythonVersion = 2

" Valloric/YouCompleteMe setup
" let g:ycm_filetype_blacklist = {}
" let g:ycm_filetype_whitelist = {'*': 1}
" let g:ycm_python_binary_path = 'python'
" let g:ycm_autoclose_preview_window_after_completion=1
" let g:ycm_complete_in_comments = 1 
" let g:ycm_seed_identifiers_with_syntax = 1 
" let g:ycm_collect_identifiers_from_comments_and_strings = 1

" vim-scripts/vim-auto-save setup (do not change the 'updatetime' option)
let g:auto_save_no_updatetime = 1

" cjrh/vim-conda setup
let g:conda_startup_msg_suppress = 1

" refresh gitgutter every 250ms rather than 2s
set updatetime=250

" miniyank settings
map p <Plug>(miniyank-autoput)
map P <Plug>(miniyank-autoPut)
map <leader>n <Plug>(miniyank-cycle)

" make w, b, and e use CamelCaseMotion
map <silent>w <Plug>CamelCaseMotion_w
map <silent>b <Plug>CamelCaseMotion_b
map <silent>e <Plug>CamelCaseMotion_e
sunmap w
sunmap b
sunmap e

" Show airline without split buffers
set laststatus=2

filetype plugin indent on

let mapleader=","

color jellybeans

set cursorline
set expandtab
set modelines=0
set shiftwidth=2
set clipboard=unnamed
set synmaxcol=128
if !has('nvim')
  set ttyscroll=10
endif
set encoding=utf-8
set tabstop=2
set nowrap
set number
set expandtab
set nowritebackup
set noswapfile
set nobackup
set hlsearch
set ignorecase
set smartcase
set mouse=a

" Automatic formatting
autocmd BufWritePre *.rb :%s/\s\+$//e
autocmd BufWritePre *.go :%s/\s\+$//e
autocmd BufWritePre *.haml :%s/\s\+$//e
autocmd BufWritePre *.html :%s/\s\+$//e
autocmd BufWritePre *.scss :%s/\s\+$//e
autocmd BufWritePre *.slim :%s/\s\+$//e

au BufNewFile * set noeol
au BufRead,BufNewFile *.go set filetype=go

" No show command
autocmd VimEnter * set nosc

" Quick ESC
imap jj <ESC>

" Jump to the next row on long lines
map <Down> gj
map <Up>   gk
nnoremap j gj
nnoremap k gk

" format the entire file
nmap <leader>fef ggVG=

" Open new buffers
nmap <leader>s<left>   :leftabove  vnew<cr>
nmap <leader>s<right>  :rightbelow vnew<cr>
nmap <leader>s<up>     :leftabove  new<cr>
nmap <leader>s<down>   :rightbelow new<cr>

" Will goto definition of whatever I’m currently on
" map <leader>g :YcmCompleter GoToDefinitionElseDeclaration<CR>

" Tab between buffers
noremap <tab> <c-w><c-w>

" Switch between last two buffers
nnoremap <leader><leader> <C-^>

" Resize buffers
if bufwinnr(1)
  nmap Ä <C-W><<C-W><
  nmap Ö <C-W>><C-W>>
  nmap ö <C-W>-<C-W>-
  nmap ä <C-W>+<C-W>+
endif

" NERDTree
nmap <leader>n :NERDTreeToggle<CR>
let NERDTreeHighlightCursorline=1
let NERDTreeIgnore = ['tmp', '.yardoc', 'pkg']

" Syntastic
" let g:syntastic_mode_map = { 'mode': 'passive' }
" let g:syntastic_ruby_exec = '~/.rvm/rubies/ruby-2.0.0-p0/bin/ruby'
" let g:syntastic_python_checkers = ['pylint']

" Go programming
set rtp+=/usr/local/Cellar/go/1.0.3/misc/vim

" Quit with :Q
command -nargs=0 Quit :qa!

" Custom (kmjohny)
com! FormatJSON %!python -m json.tool

"" fzf settings/bindings
let $FZF_DEFAULT_COMMAND = 'ag -l -g ""'
let g:fzf_history_dir = '~/.fzf-history'

" Fuzzy-find with fzf
map <C-p> :Files<cr>
nmap <C-p> :Files<cr>

" View commits in fzf
nmap <Leader>c :Commits<cr>

" Complete from open tmux panes (from @junegunn)
inoremap <expr> <C-x><C-t> fzf#complete( 'tmuxwords.rb -all-but-current --scroll 499 --min 5')
inoremap <expr> <C-x><C-k> fzf#complete ('cat /usr/share/dict/words')

" Mapping selecting mappings
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Advanced customization using autoload functions
inoremap <expr> <c-x><c-k> fzf#vim#complete#word({'left': '15%'})

" eclim setup auto-completion using Valloric/YouCompleteMe
" let g:EclimCompletionMethod = 'omnifunc'
" vim command setup to start eclimd
" command StartupEclim :silent !eclimd -b

















" Conquer of Completion
" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
set signcolumn=yes

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
if has('patch8.1.1068')
  " Use `complete_info` if your (Neo)Vim version supports it.
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  imap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current line.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Introduce function text object
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Use <TAB> for selections ranges.
" NOTE: Requires 'textDocument/selectionRange' support from the language server.
" coc-tsserver, coc-python are the examples of servers that support it.
nmap <silent> <TAB> <Plug>(coc-range-select)
xmap <silent> <TAB> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings using CoCList:
" Show all diagnostics.
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>





